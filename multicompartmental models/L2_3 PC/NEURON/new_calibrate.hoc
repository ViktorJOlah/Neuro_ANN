load_file("nrngui.hoc")

load_file("morph.hoc")
load_file("biophys.hoc")
load_file("fix_nseg.hoc")

geom_nseg()

load_file("1.ses")

tstop = 10000

INITDUR = 100 // # ms to reach steady state


proc init() { local temp

v_init = -96
  
  finitialize(v_init)
  t = -2*INITDUR // jump to a time "before" 0
  temp = cvode.active()
  if (temp != 0) { // if cvode is on, turn it off
    cvode.active(0)
    dt = 0.01
  }
  while (t < -INITDUR) {
    fadvance()
  }
  if (temp != 0) { cvode.active(1) } // turn cvode back on if necessary
  t = 0
  if (cvode.active()) {
    cvode.re_init()
  } else {
    fcurrent()
  }
  frecord_init()
}


///////////////	add synapse to every third segment

objref syn[50000], dend_list, apic_list, r1, r_dend, r_apic

dend_list = new Vector()
apic_list = new Vector()
r1 = new Random(128)
r_dend = new Random(128)
r_apic = new Random(128)
r1.uniform(0,tstop)


for i=0,56{
	if(i%3 == 0){
		dend_list.append(i)
	}
}


for i=0,37{
	if(i%3 == 0){
		apic_list.append(i)
	}
}

r_dend.uniform(0, dend_list.size()-1)
r_apic.uniform(0, apic_list.size()-1)


proc synapse(){

	if ($1 == 0){
		access dend[$2]
	}else{access apic[$2]}
	
	syn[$4] = new AlphaSynapse(.5)
	syn[$4].onset = int(r1.repick())
	syn[$4].gmax = 0.003
	syn[$4].tau = 2

	if ($3 == 0){
		syn[$4].e = 0
	}else{syn[$4].e = -110}
	
}

objref m, vecrec, f, vc, r_glob, vcrec
vc = new VClamp(.5)
vc.amp(0) = -96
vc.dur(0) = tstop


m = new Matrix()
vecrec = new Vector()
vecrec.record(&soma.v(.5),0.5)

vcrec = new Vector()
vcrec.record(&vc.i(), 0.5)

f = new File()

proc add_syns(){

	vc.dur(0) = tstop

	m = new Matrix()
	m.resize(tstop*2+1,(dend_list.size() + apic_list.size())*2)
	syn_counter = 0
	
	for i1 =0, $1{
		for i2 =0, 1{
			if (syn_counter%3 == 0){i3 =1}else{i3 =0}
				if (i2 == 0){
					r_dend.repick()
					branch_id = int(r_dend.repick())
					branch_num = dend_list.x[branch_id]
					synapse(i2, branch_num,i3, syn_counter)
					
					if (i3 == 0){
						m.setval(syn[syn_counter].onset*2, branch_id+2, m.x[syn[syn_counter].onset*2][branch_id+2]+0.003)
						//print syn[syn_counter].onset*2, branch_id+2
					}else{
						m.setval(syn[syn_counter].onset*2, dend_list.size() + branch_id+1, m.x[syn[syn_counter].onset*2][dend_list.size() + branch_id+1]+0.003)
						//print syn[syn_counter].onset*2, dend_list.size() + branch_id+1
					}
					syn_counter += 1

				}else{
					r_apic.repick()
					r_apic.repick()
					branch_id = int(r_apic.repick())
					branch_num = apic_list.x[branch_id]
					synapse(i2, branch_num,i3, syn_counter)
					if (i3 == 0){
						m.setval(syn[syn_counter].onset*2, ((dend_list.size()) * 2) + branch_id, m.x[syn[syn_counter].onset*2][((dend_list.size()) * 2) + branch_id]+0.003)
						//print ((dend_list.size()) * 2) + branch_id-1, syn[syn_counter].onset*2
					}else{
						m.setval(syn[syn_counter].onset*2, ((dend_list.size()) * 2) + apic_list.size() + branch_id-1, m.x[syn[syn_counter].onset*2][((dend_list.size()) * 2) + apic_list.size() + branch_id-1]+0.003)
						//print ((dend_list.size()) * 2) + apic_list.size() + branch_id-2, syn[syn_counter].onset*2
					}
					syn_counter += 1
					
				}
				
			
		}
	}

	run()


	for i = 0,vecrec.size()-1{
		m.setval(i, 0, vcrec.x[i])
	}

	vc.dur(0) = 0
	run()
	
	for i = 0,vecrec.size()-1{
		m.setval(i, 1, vecrec.x[i])
	}

	f.aopen("5.txt")
	m.fprint(f, "%-3g ")
	f.close()
		
}



r_glob = new Random(128)
r_glob.discunif(10,200)



for k1 = 0, 200{
print k1
	frq = r_glob.repick()
	print k1, frq
	add_syns(frq)
	
	
}






