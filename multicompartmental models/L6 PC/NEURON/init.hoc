load_file("nrngui.hoc")

load_file("morph.hoc")
load_file("biophys.hoc")
load_file("fix_nseg.hoc")

geom_nseg()

/*


INITDUR = 100 // # ms to reach steady state


proc init() { local temp

v_init = -70
  
  finitialize(v_init)
  t = -2*INITDUR // jump to a time "before" 0
  temp = cvode.active()
  if (temp != 0) { // if cvode is on, turn it off
    cvode.active(0)
    dt = 0.01
  }
  while (t < -INITDUR) {
    fadvance()
  }
  if (temp != 0) { cvode.active(1) } // turn cvode back on if necessary
  t = 0
  if (cvode.active()) {
    cvode.re_init()
  } else {
    fcurrent()
  }
  frecord_init()
}


load_file("1.ses")


tstop = 10000


objref dend_r, r1, scaling_activity, inp_m, vec_rec, bas_exc[100001], bas_inh[100001], f1

dend_r = new Random()
r1 = new Random()
scaling_activity = new Random()
vec_rec = new Vector()
f1 = new File()

dend_r.discunif(0,35)
r1.discunif(0,tstop)
//scaling_activity.lognormal(1,2)
scaling_activity.uniform(0,0.3)
access soma
vec_rec.record(&soma.v(0.5), 0.5)


soma distance()

proc create_stim(){
	objref bas_exc[100001], bas_inh[100001]
	inp_m = new Matrix()
	num_col = 73
	inp_m.resize(20001, num_col)

	scale1 = scaling_activity.repick()
	while (scale1 < 0 || scale1 > 2){
		scale1 = scaling_activity.repick()
		}
	//scale1 = 2
	print(scale1)

	

	
	//basal exc
	for i = 0, int(5000*scale1){
		seg = dend_r.repick()
		access dend[seg]
		timing = int(r1.repick())
		bas_exc[i] = new AlphaSynapse(0.5)
		bas_exc[i].onset = timing
		bas_exc[i].tau = 1
		bas_exc[i].gmax = 0.0005
		bas_exc[i].e = 0
		//print timing, distance(0.5), bas_exc[i].gmax
		inp_m.setval(timing, seg+1, bas_exc[i].gmax)
	}


	//basal inh	
	for i = 0, int(5000*scale1){
		seg = dend_r.repick()
		access dend[seg]
		timing = int(r1.repick())
		bas_inh[i] = new AlphaSynapse(0.5)
		bas_inh[i].onset = timing
		bas_inh[i].tau = 1
		bas_inh[i].gmax = 0.0005
		bas_inh[i].e = -90
		//print timing, distance(0.5), bas_inh[i].gmax
		inp_m.setval(timing, seg+37, bas_inh[i].gmax)
	}
	
	run()
	for i=0, vec_rec.size()-1{
		inp_m.setval(i, 0, vec_rec.x[i])
	}

	
	f1.aopen("vmi2.txt")
	inp_m.fprint(f1, "%g ")
	f1.close()
	
access soma
}

for baszasd = 0, 400{
	create_stim()
}


*/












